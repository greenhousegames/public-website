{"version":3,"sources":["app/pages/learn/abc/utils.js"],"names":[],"mappingsfile":"public/assets/js/pages/learn/abc/utils.js","sourcesContent":["'use strict';\n\nfunction resize(game) {\n  var width = getGameWidth(game.containerId);\n  var height = getGameHeight(game.containerId);\n  if (game.width != width) {\n    game.scale.setGameSize(width, height);\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction preload(game, buttons) {\n  buttons = buttons || [];\n  var breakpoint = getBreakpoint(game);\n  game.load.image('greenhouse', '/assets/img/learning/logo-circle-' + breakpoint + '.png');\n  game.load.image('greenhouse-square', '/assets/img/learning/logo-square-' + breakpoint + '.png');\n  buttons.forEach(function (name) {\n    game.load.image(name + '-button', '/assets/img/learning/' + name + '-button-' + breakpoint + '.png');\n  });\n  game.load.image('reload', '/assets/img/learning/restart-game.png');\n}\n\nfunction create(game) {\n  resize(game);\n  game.physics.startSystem(Phaser.Physics.ARCADE);\n  game.stage.backgroundColor = '#000000';\n  game.add.button(game.width - 16 - 8, game.height - 16 - 8, 'reload', function () {\n    return game.state.restart();\n  });\n  game.scale.setResizeCallback(function () {\n    if (resize(game)) {\n      game.state.restart();\n    }\n  });\n}\n\nfunction getIconSize(game) {\n  var size = void 0;\n  ifBreakpoint(game, 'small', function () {\n    return size = 32;\n  });\n  ifBreakpoint(game, 'medium', function () {\n    return size = 64;\n  });\n  ifBreakpoint(game, 'large', function () {\n    return size = 128;\n  });\n  return size;\n}\n\nfunction getBreakpoint(game) {\n  if (game.width > 1000) return 'large';else if (game.width > 600) return 'medium';else return 'small';\n}\n\nfunction getGameWidth(id) {\n  return $('#' + id).width();\n}\n\nfunction getGameHeight(id) {\n  return getGameWidth(id) / (16 / 9);\n}\n\nfunction init(letter, config) {\n  var containerId = 'learning-game-' + letter + '-container';\n  var width = getGameWidth(containerId);\n  var height = getGameHeight(containerId);\n  var game = new Phaser.Game(width, height, Phaser.AUTO, 'learning-game-' + letter, config);\n  game.containerId = containerId;\n  return game;\n}\n\nfunction alignButtons(game, buttons) {\n  var padding = void 0;\n  ifBreakpoint(game, 'small', function () {\n    return padding = 8;\n  });\n  ifBreakpoint(game, 'medium', function () {\n    return padding = 12;\n  });\n  ifBreakpoint(game, 'large', function () {\n    return padding = 16;\n  });\n\n  for (var i = 0; i < buttons.length; i++) {\n    buttons[i].anchor.setTo(0, 1);\n    buttons[i].x = padding + (buttons[i].width + padding) * i;\n    buttons[i].y = game.height - padding;\n  }\n}\n\nfunction ifBreakpoint(game, breakpoint, callback) {\n  if (getBreakpoint(game) == breakpoint) {\n    callback();\n  }\n}\n\nmodule.exports = {\n  resize: resize,\n  preload: preload,\n  create: create,\n  getIconSize: getIconSize,\n  init: init,\n  getBreakpoint: getBreakpoint,\n  alignButtons: alignButtons,\n  ifBreakpoint: ifBreakpoint\n};\n"]}