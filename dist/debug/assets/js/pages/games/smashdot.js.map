{"version":3,"sources":["app/pages/games/smashdot.js"],"names":[],"mappingszMA;AAAA","file":"public/assets/js/pages/games/smashdot.js","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _reporting = require('@greenhousegames/smash-dot/dist/reporting');\n\nvar _reporting2 = _interopRequireDefault(_reporting);\n\nvar _firebaseClient = require('firebase-client.js');\n\nvar _firebaseClient2 = _interopRequireDefault(_firebaseClient);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Reporting = function (_FirebaseClient) {\n  _inherits(Reporting, _FirebaseClient);\n\n  function Reporting() {\n    _classCallCheck(this, Reporting);\n\n    var _this = _possibleConstructorReturn(this, (Reporting.__proto__ || Object.getPrototypeOf(Reporting)).call(this));\n\n    _this.reporting = new _reporting2.default(_this.firebase.database().ref('games/smashdot/data'), _this.firebase.database().ref('games/smashdot/reporting'));\n    return _this;\n  }\n\n  _createClass(Reporting, [{\n    key: 'draw',\n    value: function draw() {\n      // metrics\n      this._drawGamePlayed();\n      this._drawUsersPlayed();\n      this._drawLastPlayed();\n\n      // rankings\n      this._drawClassicRankings();\n      this._drawSurvivalRankings();\n\n      // charts\n      this._drawMaxScores();\n      this._drawModesPlayed();\n    }\n  }, {\n    key: '_drawClassicRankings',\n    value: function _drawClassicRankings() {\n      var _this2 = this;\n\n      this.reporting.filter('users').max('classic-score').count().then(function (value) {\n        jQuery('#classic_ranking2').text('of ' + value);\n      }).catch(function (err) {\n        console.log(err);\n      });\n\n      this.reporting.filter('users-modes', {\n        uid: this.currentUID(),\n        mode: 'classic'\n      }).max('classic-score').value().then(function (pr) {\n        if (pr) {\n          _this2.reporting.filter('users', {\n            uid: _this2.currentUID()\n          }).max('classic-score').greater(pr).count().then(function (value) {\n            jQuery('#classic_ranking1').text('#' + value);\n          });\n        } else {\n          jQuery('#classic_ranking1').text('N/A');\n        }\n      }).catch(function (err) {\n        console.log(err);\n      });\n    }\n  }, {\n    key: '_drawSurvivalRankings',\n    value: function _drawSurvivalRankings() {\n      var _this3 = this;\n\n      this.reporting.filter('users').min('survival-duration').count().then(function (value) {\n        jQuery('#survival_ranking2').text('of ' + value);\n      }).catch(function (err) {\n        console.log(err);\n      });\n\n      this.reporting.filter('users-modes', {\n        uid: this.currentUID(),\n        mode: 'survival'\n      }).min('survival-duration').value().then(function (pr) {\n        if (pr) {\n          _this3.reporting.filter('users', {\n            uid: _this3.currentUID()\n          }).min('survival-duration').greater(pr).count().then(function (value) {\n            jQuery('#survival_ranking1').text('#' + value);\n          });\n        } else {\n          jQuery('#survival_ranking1').text('N/A');\n        }\n      }).catch(function (err) {\n        console.log(err);\n      });\n    }\n  }, {\n    key: '_drawGamePlayed',\n    value: function _drawGamePlayed() {\n      this.reporting.filter().sum('played').select(1).then(function (values) {\n        jQuery('#game_played_count').text(values[0] || 0);\n      }).catch(function (err) {\n        console.log(err);\n      });\n    }\n  }, {\n    key: '_drawUsersPlayed',\n    value: function _drawUsersPlayed() {\n      this.reporting.filter('users').sum('played').count().then(function (total) {\n        jQuery('#user_played_count').text(total);\n      }).catch(function (err) {\n        console.log(err);\n      });\n    }\n  }, {\n    key: '_drawLastPlayed',\n    value: function _drawLastPlayed() {\n      this.reporting.filter().last('endedAt').select(1).then(function (values) {\n        if (!values[0]) {\n          jQuery('#last_played_timestamp').text('never');\n        } else {\n          var date = new Date();\n          date.setTime(values[0]);\n          jQuery('#last_played_timestamp').attr('datetime', date.toISOString());\n          jQuery('#last_played_timestamp').timeago();\n        }\n      }).catch(function (err) {\n        console.log(err);\n      });\n    }\n  }, {\n    key: '_drawModesPlayed',\n    value: function _drawModesPlayed() {\n      Promise.all([this.reporting.filter('modes', { mode: 'survival' }).sum('played').value(), this.reporting.filter('modes', { mode: 'classic' }).sum('played').value(), this.reporting.filter('modes', { mode: 'battle' }).sum('played').value()]).then(function (values) {\n        var element = jQuery('#sum_played_chart');\n        var data = new google.visualization.arrayToDataTable([['Mode', 'Times Played'], ['Survival', values[0] || 0], ['Classic', values[1] || 0], ['Battle', values[2] || 0]]);\n\n        // Set chart options\n        var options = {\n          title: 'Modes Played',\n          width: element.width(),\n          height: 400,\n          pieHole: 0.4,\n          legend: { position: 'bottom' }\n        };\n\n        // Instantiate and draw our chart, passing in some options.\n        var chart = new google.visualization.PieChart(element[0]);\n        chart.draw(data, options);\n      }).catch(function (err) {\n        console.log(err);\n      });\n    }\n  }, {\n    key: '_drawMaxScores',\n    value: function _drawMaxScores() {\n      Promise.all([this.reporting.filter('modes', { mode: 'survival' }).max('survival-score').value(), this.reporting.filter('modes', { mode: 'classic' }).max('classic-score').value(), this.reporting.filter('modes', { mode: 'battle' }).max('battle-score').value()]).then(function (values) {\n        var element = jQuery('#max_score_chart');\n        var data = new google.visualization.arrayToDataTable([['Mode', 'Max Score'], ['Survival', values[0] || 0], ['Classic', values[1] || 0], ['Battle', values[2] || 0]]);\n\n        // Set chart options\n        var options = {\n          title: 'Max Scores',\n          width: element.width(),\n          height: 400,\n          legend: { position: 'bottom' }\n        };\n\n        // Instantiate and draw our chart, passing in some options.\n        var chart = new google.visualization.ColumnChart(element[0]);\n        chart.draw(data, options);\n      }).catch(function (err) {\n        console.log(err);\n      });\n    }\n  }]);\n\n  return Reporting;\n}(_firebaseClient2.default);\n\ngoogle.charts.load('current', { 'packages': ['corechart'] });\ngoogle.charts.setOnLoadCallback(function () {\n  var report = new Reporting();\n  report.requireAuth().then(function () {\n    $(document).ready(function () {\n      report.draw();\n\n      $(window).resize(function () {\n        report.draw();\n      });\n    });\n  });\n});\n"]}